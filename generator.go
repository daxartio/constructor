package main

import (
	"bytes"
	"html/template"
)

var templ = `// Code generated by github.com/daxartio/constructor; DO NOT EDIT.
package {{.Package.Name}}
{{- $struct := .}}
{{- $structVar := LowerFirst $struct.Name}}
{{- $optT := print .Prefix "Option" }}

type {{$optT}} func({{$structVar}} *{{.Name}})

func New{{.Prefix}}(opts ...{{$optT}}) *{{.Name}} {
	{{$structVar}} := &{{.Name}}{}
	for _, opt := range opts {
		opt({{$structVar}})
	}

	return {{$structVar}}
}

{{- range .Fields}}
{{- $field := LowerFirst .Name }}

func With{{$struct.Prefix}}{{UpperFirst .Name}}({{$field}} {{.TypeName}}) func(*{{$struct.Name}}) {
	return func({{$structVar}} *{{$struct.Name}}) {
		{{$structVar}}.{{.Name}} = {{$field}}
	}
}
{{- end }}
`

type TemplateInfo struct {
	*StructInfo
	Prefix string
}

type Generator struct {
	NoPrefix bool
}

func (g *Generator) generateCode(sInfo *StructInfo) (src string, err error) {
	return g.render(sInfo)
}

func (g *Generator) render(sInfo *StructInfo) (src string, err error) {
	t := g.getTemplate()

	prefix := sInfo.Name
	if g.NoPrefix {
		prefix = ""
	}

	buf := bytes.NewBuffer(make([]byte, 0, 1024))
	err = t.Execute(buf, TemplateInfo{sInfo, prefix})

	src = buf.String()

	return
}

func (g *Generator) getTemplate() *template.Template {
	return template.Must(template.New("").Funcs(funcs).Parse(templ))
}
